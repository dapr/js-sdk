/*
Copyright 2022 The Dapr Authors
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

import { ConversationToolCall } from "./ConversationToolCall.type";

export type ConversationInput = {
  /**
   * The message content to send to the LLM
   */
  messages: ConversationMessage[];
  /**
   * A boolean value to enable obfuscation of sensitive information present in the content field. Set this value if PII for this specific content needs to be scrubbed exclusively
   */
  scrub_pii?: boolean;
};

type ConversationMessageContent = {
  text: string;
};

type ConversationMessageOfType = {
  /** The name of the participant in the message */
  name?: string;
  content: ConversationMessageContent[];
};

// Inspired by OpenAI's ChatCompletionMessageParamUnion
type ConversationMessage =
  | { of_developer: ConversationMessageOfType }
  | { of_system: ConversationMessageOfType }
  | { of_user: ConversationMessageOfType }
  | {
      of_assistant: ConversationMessageOfType & {
        /**
         * Tool calls generated by the model.
         * These should be executed by the client.
         */
        tool_calls?: ConversationToolCall[];
      };
    }
  | {
      of_tool: {
        /**
         * Tool ID for tracking tool call history
         */
        tool_id?: string;
        name: string;
        content: ConversationMessageContent[];
      };
    };
